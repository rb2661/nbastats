mutate(
time_range = case_when(
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
)
)
time_of_day <- function(df,x){
df2 <- select(df, x) %>%
mutate(
time_range = case_when(
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
df2$x >= 1200 & df2$x <= 1659 ~ "Afternoon"
df2$x >= 1700 & df2$x <= 2059 ~ "Evening"
df2$x >= 2100 & df2$x <= 459 ~ "Night"
)
)
}
time_of_day(flights, flights$dep_time)
time_of_day <- function(df,x){
df2 <- select(df, x=flights$dep_time) %>%
mutate(
time_range = case_when(
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
df2$x >= 1200 & df2$x <= 1659 ~ "Afternoon"
df2$x >= 1700 & df2$x <= 2059 ~ "Evening"
df2$x >= 2100 & df2$x <= 459 ~ "Night"
)
)
}
time_of_day(flights)
time_of_day <- function(df,x=flights$dep_time){
df2 <- select(df, x) %>%
mutate(
time_range = case_when(
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
df2$x >= 1200 & df2$x <= 1659 ~ "Afternoon"
df2$x >= 1700 & df2$x <= 2059 ~ "Evening"
df2$x >= 2100 & df2$x <= 459 ~ "Night"
)
)
}
time_of_day(flights)
flights2 <- flights %>%
select(dep_time) %>%
mutate(
time_range = case_when(
df2$x >= 500 & df2$x <= 1159 ~ "Morning"
df2$x >= 1200 & df2$x <= 1659 ~ "Afternoon"
df2$x >= 1700 & df2$x <= 2059 ~ "Evening"
df2$x >= 2100 & df2$x <= 459 ~ "Night"
)
)
head(flights2)
flights2 <- flights %>%
select(dep_time) %>%
mutate(
time_range = case_when(
dep_time >= 500 & dep_time <= 1159 ~ "Morning"
dep_time >= 1200 & dep_time <= 1659 ~ "Afternoon"
dep_time >= 1700 & dep_time <= 2059 ~ "Evening"
dep_time >= 2100 & dep_time <= 459 ~ "Night"
)
)
head(flights2)
flights2 <- flights %>%
select(dep_time) %>%
mutate(
time_range = case_when(
dep_time >= 500 & dep_time <= 1159 ~ "Morning",
dep_time >= 1200 & dep_time <= 1659 ~ "Afternoon",
dep_time >= 1700 & dep_time <= 2059 ~ "Evening",
dep_time >= 2100 & dep_time <= 459 ~ "Night"
)
)
head(flights2)
flights2 <- flights %>%
select(dep_time) %>%
mutate(
time_range = case_when(
dep_time >= 500 & dep_time <= 1159 ~ "Morning",
dep_time >= 1200 & dep_time <= 1659 ~ "Afternoon",
dep_time >= 1700 & dep_time <= 2059 ~ "Evening",
dep_time >= 2100 & dep_time <= 459 ~ "Night"
)
)
flights2
filter(flights2, dep_time > 1000)
filter(flights2, dep_time > 1200)
time_of_day <- function(df,x){
df2 <- df %>%
select(x) %>%
mutate(
time_range = case_when(
x >= 500 & x <= 1159 ~ "Morning",
x >= 1200 & x <= 1659 ~ "Afternoon",
x >= 1700 & x <= 2059 ~ "Evening",
x >= 2100 & x <= 459 ~ "Night"
)
)
}
time_of_day(flights)
time_of_day <- function(df,x){
df2 <- df %>%
select(x) %>%
mutate(
time_range = case_when(
x >= 500 & x <= 1159 ~ "Morning",
x >= 1200 & x <= 1659 ~ "Afternoon",
x >= 1700 & x <= 2059 ~ "Evening",
x >= 2100 & x <= 459 ~ "Night"
)
)
}
time_of_day(flights, dep_time)
time_of_day <- function(df, x){
select(df, x) %>%
mutate(
time_range = case_when(
x >= 500 & x <= 1159 ~ "Morning",
x >= 1200 & x <= 1659 ~ "Afternoon",
x >= 1700 & x <= 2059 ~ "Evening",
x >= 2100 & x <= 459 ~ "Night"
)
)
}
time_of_day(flights, flights$dep_time)
library(nycflights13)
library(tidyverse)
time_of_day <- function(df, col_name){
select(df, col_name) %>%
mutate(
time_range = case_when(
col_name >= 500 & col_name <= 1159 ~ "Morning",
col_name >= 1200 & col_name <= 1659 ~ "Afternoon",
col_name >= 1700 & col_name <= 2059 ~ "Evening",
col_name >= 2100 & col_name <= 459 ~ "Night"
)
)
}
time_of_day(flights, "dep_time")
time_of_day <- function(df, col_name){
select(df, all_of(col_name)) %>%
mutate(
time_range = case_when(
col_name >= 500 & col_name <= 1159 ~ "Morning",
col_name >= 1200 & col_name <= 1659 ~ "Afternoon",
col_name >= 1700 & col_name <= 2059 ~ "Evening",
col_name >= 2100 & col_name <= 459 ~ "Night"
)
)
}
time_of_day(flights, "dep_time")
time_of_day <- function(df, col_name){
select(df, all_of(col_name)) %>%
mutate(
time_range = case_when(
col_name >= 500 ~ "Morning",
col_name >= 1200 & col_name <= 1659 ~ "Afternoon",
col_name >= 1700 & col_name <= 2059 ~ "Evening",
col_name >= 2100 & col_name <= 459 ~ "Night"
)
)
}
time_of_day(flights, "dep_time")
time_of_day <- function(df, col_name){
select(df, all_of(col_name)) %>%
mutate(
time_range = case_when(
col_name >= 500 && dep_time <= 1159 ~ "Morning",
col_name >= 1200 && col_name <= 1659 ~ "Afternoon",
col_name >= 1700 && col_name <= 2059 ~ "Evening",
col_name >= 2100 && col_name <= 459 ~ "Night"
)
)
}
time_of_day(flights, "dep_time")
head(flights)
library(nycflights13)
library(tidyverse)
head(flights)
flights_numeric_vars<-select_if(flights, is.numeric)
head(flights_numeric_vars)
df <- tibble::tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
median(df$a)
median(df$b)
median(df$c)
median(df$d)
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
head(flights_numeric_vars)
median_vector <- function(df){
output <- vector("double", ncol(df))
for (i in seq_along(df)) {
output[[i]] <- median(df[[i]])
}
output
}
median_vector(flights_numeric_vars)
flights_numeric_vars[1]
flights_numeric_vars[[1]]
flights_numeric_vars[!isna(flights_numeric_vars[1]),1]
flights_numeric_vars[!is.na(flights_numeric_vars[1]),1]
lifecycle::last_warnings()
flights_numeric_vars[!is.na(flights_numeric_vars[1]),]
length(flights_numeric_vars)
flights_numeric_vars
median_vector(flights_numeric_vars)
flights_numeric_vars[!is.na(flights_numeric_vars[4]),]
flights_numeric_vars[!is.na(flights_numeric_vars[4]),][4]
median(flights_numeric_vars[!is.na(flights_numeric_vars[4]),][4])
flights_numeric_vars[[!is.na(flights_numeric_vars[4]),]][4]
flights_numeric_vars[[!is.na(flights_numeric_vars[4])]][4]
flights_numeric_vars[!is.na(flights_numeric_vars[4])][4]
flights_numeric_vars[!is.na(flights_numeric_vars[4]),][4]
median_vector <- function(df){
output <- vector("double", ncol(df))
for (i in seq_along(df)) {
output[[i]] <- median(df[[i]], na.rm=TRUE)
}
output
}
median_vector(flights_numeric_vars)
head(flights_numeric_vars)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
output <- vector("double", length(df))
for (i in seq_along(df)) {
output[[i]] <- mean(df[[i]])
}
output
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
out[i] <- fun(df[[i]])
}
out
}
col_summary(df, median)
col_summary(df, mean)
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
apply(my.matrx, 1, sum)
apply(my.matrx, 2, length)
apply(my.matrx, 1, length)
apply(my.matrx, 2, function (x) length(x)-1)
st.err <- function(x){
sd(x)/sqrt(length(x))
}
apply(my.matrx,2, st.err)
my.matrx2 <- apply(my.matrx,1:2, function(x) x+3)
my.matrx2
vec <- c(1:10)
vec
apply(vec, 1, sum)
apply(my.matrx, 1, sum, rm.na=TRUE)
my.matrx
apply(my.matrx, 1, sum, rm.na=TRUE)
my.matrx
apply(my.matrx, 1, sum)
my.matrx
apply(my.matrx, 1, sum, rm.na=TRUE)
my.matrx
apply(my.matrx, 1, sum, rm.na=TRUE)
apply(my.matrx, 1, sum)
lapply(vec, sqrt)
lapply(vec, sum)
unlist(lapply(vec, sqrt))
A<-c(1:9)
B<-c(1:12)
C<-c(1:15)
my.lst<-list(A,B,C)
my.lst
lapply(my.lst, sum)
sapply(my.lst, sum)
my.lst2 <- lapply(my.lst, function(x) x*2)
my.lst2
my.lst3 <- lapply(my.lst, function(x) sum(x))
my.lst3
apply(my.matrx, 1, sum, rm.na=TRUE)
apply(my.matrx, 1, sum)
map(df, sum)
map_dbl(df, sum)
typeof(sum(df))
map_int(df, sum)
map_chr(df, sum)
map_dbl(df, mean, na.rm=TRUE)
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
str(models)
str(vec)
str(my.lst)
str(df)
x <- list(1:3, TRUE, "Hello", list(1:2, 5))
x[[3]]
x[c(1,3)]
x[c(1:3)]
x <- list(y=1:3, TRUE, z="Hello")
x
x$y
x[[2]]
x[[3]]
x$z
pluck(x, 1)
pluck(x, "y")
keep(x, is.numeric)
keep(x, isTRUE)
discard(x, isTRUE)
append(x, x)
append(x, df) #converts df columns to list elements in process
flatten(x)
as.list(df)
keep(df, is.numeric)
discard(df, is.numeric)
df$b<-as.character(df$b)
keep(df, is.character)
df2<-as.data.frame(df)
keep(df2, is.numeric)
discard(df2, is.numeric)
df2$b<-as.character(df2$b)
keep(df2, is.character)
discard(df2, is.character)
df$b<-as.numeric(df$b)
dflist<-as.list(df)
lapply(dflist, mean)
map_dbl(dflist, mean, na.rm=TRUE)
library(foreach)
foreach(a=dflist, .combine=c) %do% mean(a)
foreach(a=dflist, .combine=c) %do% try(mean(a))
install(AmesHousing)
install.packages("AmesHousing")
library(tidyverse)
library(purrr)
head(Ames)
head(AmesHousing)
library(AmesHousing)
head(AmesHousing)
head(Ames)
head(ames)
head(ames_raw)
as_tibble(ames_raw)
unlist(ames_raw)
as.list(ames_raw)
ames_list <- as.list(ames_raw) # list of each column; each column as vector
ames_factor <- keep(ames_list, is.factor)
ames_factor
head(ames_factor)
columns(ames_list)
ames_list.columns
ames_list
ames_raw
ames_numeric <- keep(ames_list, is.numeric)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
x <- list(1:3, TRUE, "Hello", list(1:2, 5))
keep(x, is.numeric)
ames_list
ames_factor <- keep(ames_raw, is.factor)
head(ames_factor)
ames_factor
ames_factor <- keep(ames_raw, is.character)
ames_factor
ames_numeric <- keep(ames_raw, is.numeric)
ames_numeric
ames_logical <- keep(ames_raw, is.logical)
ames_logical
ames_raw
ames <- read_csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
ames_factor <- keep(ames, is.character)
ames_factor
ames_numeric <- keep(ames, is.numeric)
ames_numeric
ames_logical <- keep(ames, is.logical)
ames_logical
ames_factor <- keep(ames, is.factor)
ames_factor
ames_factor <- keep(ames, is.character)
ames_factor
ames
ames$CentralAir
ames$HalfBath
ames_factor <- keep(ames, is.fact)
ames_factor
ames_numeric <- keep(ames, is.numeric)
ames_numeric
ames_logical <- keep(ames, is_logical)
ames_logical
ames_logical <- keep(ames, is.logical)
ames_logical
ames <- read.csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
ames
as.tibble(ames)
ames <- as_tibble(ames)
ames
library(tidyverse)
library(purrr)
ames <- read.csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
ames <- as_tibble(ames)
ames
ames_factor <- keep(ames, is.fact)
ames_factor
ames_factor <- keep(ames, is.factor)
ames_factor
ames_factor <- keep(ames, is.fact)
ames_factor
library(AmesHousing)
ames_factor <- keep(ames, is.fact)
ames_factor
install.packages("AmesHousing")
library(tidyverse)
library(purrr)
ames <- read.csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
ames <- as_tibble(ames)
ames
# 1
# redistribute some of these numerical but categorical to the first list?
# surely the logical list has one variable as well...
ames_factor <- keep(ames, is.fact)
ames_factor
install.packages("AmesHousing")
ames_factor <- keep(ames, is.fact)
ames_factor
ames <- read_csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
# 1
# redistribute some of these numerical but categorical to the first list?
# surely the logical list has one variable as well...
ames_factor <- keep(ames, is.fact)
ames_factor
lapply(ames_numeric, mean)
install.packages("AmesHousing")
library(tidyverse)
library(purrr)
ames <- read.csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
ames <- as_tibble(ames)
ames
# 1
# redistribute some of these numerical but categorical to the first list?
# surely the logical list has one variable as well...
ames_factor <- keep(ames, is.fact)
ames_factor
ames_numeric <- keep(ames, is.numeric)
ames_numeric
ames_logical <- keep(ames, is.logical)
ames_logical
install.packages("AmesHousing")
library(tidyverse)
library(purrr)
ames <- read.csv('C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/Data/Housing_prices_data.csv')
ames <- as_tibble(ames)
ames
ames_factor <- keep(ames, is.fact)
ames_factor
ames_numeric <- keep(ames, is.numeric)
ames_numeric
ames_logical <- keep(ames, is.logical)
ames_logical
lapply(ames_numeric, mean)
pluck(ames_numeric, "SalePrice")
as_tibble(pluck(ames_numeric, "SalePrice"))
SalePrice_df <- ames_numeric$SalePrice
SalePrice_df <- ames_numeric$SalePrice
SalePrice_df
SalePrice_df <- as_tibble(ames_numeric$SalePrice)
SalePrice_df
SalePrice_df <- ames_numeric["SalePrice"]
SalePrice_df
split(SalePrice_df, ames$HeatingQC)
HeatPriceList <- split(SalePrice_df, ames$HeatingQC)
map_dbl(HeatPriceList, colMeans)
sale_price_df <- ames_numeric["SalePrice"]
sale_price_df
#HeatingQC
heat_price_list <- split(sale_price_df, ames$HeatingQC)
map_dbl(heat_price_list, colMeans)
ames_list <- as.list(ames)
pluck(ames_list, "SalePrice")
keep(ames_list, "SalePrice")
ames_list$SalePrice
ames_list["SalePrice"]
ames_list[["SalePrice"]]
ames_list["SalePrice"]
ames_list["BldgType"]
ames_list <- as.list(ames)
sale_price_list <- ames_list["SalePrice"]
bldg_type_list <- ames_list["BldgType"]
append(sale_price_list, bldg_type_list)
ames_factor <- keep(ames, is.fact)
ames_factor
ames_factor <- keep(ames, is.factor)
ames_factor
ames_factor <- keep(ames, is.character)
ames_factor
setwd("C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/HW5_Package/nbastats")
load("C:/Users/roryb/OneDrive/Desktop/QMSS/Spring 2021/Modern Data Structures/HW5_Package/nbastats/R/sysdata.rda")
